{
  "hash": "8292b8fd747f0740640382421e3f02e3",
  "result": {
    "markdown": "---\ntitle: R\nformat:\n  html:\n    toc: true\n---\n\n\n\n\n\n## Learning R \n\n### Contributors  \n- Several colleagues/PhD students (2021-2023)  \n- Ler Vin See (Jan 2024)   \n- Sarah Lim (July 2024)\n\n\n \n## Steps to follow    \n\n## Step 1: Installing RStudio\nInstall `RStudio` and `R` (and know the difference between them)   \n-  You can install both using [this link](https://posit.co/download/rstudio-desktop/) \n- `R` is both a software and programming language   \n- `Rstudio` provides a (nice) environment to run `R`   \n- This website provides a nice [explanation of key concepts](https://okanbulut.github.io/edpy507/learning-r.html)   \n\n## Step 2: Installing R Packages\nIn `Rstudio`, perform these 2 basic chores: \n- Install `R` packages[^1]   \ni.\t`readxl`  \nii.\t`tidyverse`[^2]  \niii.\t`here`   \niv.\t`janitor`  \nv.\t`rms`  \n\n[^1]: Packages that are downloaded contain many functions that can be used to accomplishes some tasks. Each `R` function is a set of statements organized together to perform a specific task.  \n\n\n#### Package, Function, Code: An Analogy\n::: {.panel-tabset}\n\n## Package\nA `package` with its many `functions` can be seen as a book containing many pages. Just like how every page of a book tells a story, every R `function` in a `package` is based on accomplishing a task (e.g. tidying workspace or reading excel sheets)\n\n## Function\nA `function` can be seen as a page contained within a book (the `package`). This is the most important part of the 3 components mentioned here, as these `functions` are the ones you'll be using when coding in `RStudio`. `Functions` will perform tasks for you so you don't have to code something from scratch.\n\n\n::: {.callout-note}\nTo access the available functions, you first have to “activate” the `package` that the function is found in. You can do this by using the `library()` function (add the name of the package between the brackets). To learn about the functions available in a package, click on the “packages” button at the bottom right panel, and it will display a list of functions as well as what they will do\n:::\n\n## Codes\nCodes can be seen as the letters found on a page (`function`). Each page has a different number of letters, which is similar to how some `functions` are more complicated than others, and as such contain more lines of code. \n:::\n\n\n[^2]: `tidyverse` is different from the other packages, as it is a package that contains other packages. You can view the packages contained in `tidyverse` using [this link](https://www.tidyverse.org/). Note, however, that it is still crucial to learn base `R`!  \n\n\n\n::: {.callout-note}\nWhen you try downloading R packages, `RStudio` may prompt you to install `Rtools`\n. You can do so on this [website](https://cran.rstudio.com/bin/windows/Rtools/)\n:::\n\n::: {.callout-tip}\n## Tip \nTo learn about the functions available in a `package`, click on the “packages” button at the bottom right panel, and it will display a list of functions as well as what they will do\n\n:::\n\n\n### Step 2.1: How to use packages\n\n- Many functions that can aid in data analysis are found within packages that you have downloaded earlier. To access these functions, you first have to load or “activate” the package that the function is found in. You can do this by using `library(package you want to load)`\n\n\n\n### Step 2.2: Moving Rstudio Panels\n- Move console pane to the [right](https://okanbulut.github.io/edpy507/learning-r.html)  \n- Do this by clicking on the icon that looks like for squares on the left of “Addins”, where you will select the option “Console on right”\n\n![](hpics/panel_screenshot.PNG)\n\n\n## Step 3: Creating a Project Folder\n![](hpics/r.qmd pic4.jpg){width=35%}\n\nWhy it is [important](https://alexd106.github.io/intro2R/project_setup.html)\n\n-  Having clear project organisation simplifies understanding of information for both you and your collaborators\n-  A consistent and logical structure allows you to access and work with codes and data conveniently, avoiding situations where you have \"missing\" codes or  data files\n-  A well organised project reduces the risk of introducing bugs or errors into your workflow and even if they do occur, it is easier to track down the errors and deal with them efficiently\n\n1.  Open R studio\n2.\tClick File- New Project- New Directory- New Project- enter Project name- Create folder in preferred location (e.g. in Desktop)- Create Project\n   \n![](hpics/r.qmd pic1.png){width=50%} \n\n3.\tClick the white icon with green + sign on the top left corner to create new R script and save it   \n\n![](hpics/r.qmd pic2.jpg){width=40%}\n\n4.\tAdd data files into the project file as necessary. \n5.\tAs desired, open the project folder ① and click on the R project file ② . Should you have followed the above steps, you will be able to access the R script ③ and relevant data files ④ from within the project folder to work on. This is highly recommended for your convenience. \n\n![](hpics/r.qmd pic3.png){width=60%}\n\nAlternatively, you can watch [this](https://www.youtube.com/watch?v=WyrJmJWgPiU) video for more detailed instructions\n\nTip: \n\n-  Use `here` package after installing it in Step 2. It helps you locate your files if you start working in R without first opening a project folder, learn more [here](https://github.com/jennybc/here_here)\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(here)\nhere(\"Wombat\", \"WBS data files\")\n```\n:::\n\n\n\n## Step 4: fastR lesson\n- Write and run some codes on the `source` panel[^3]   \n- Go through lessons $1$ to $8$ of [fastR](https://github.com/matloff/fasteR)\n\n[^3]: Gotcha! User needs to understand that nothing gets saved after each session and all codes in R script need to be re-run during each session. \n\n## Step 5: Learning important verbs\n-  Try searching up verbs in the `tidyverse` package \n-  Based on the built-in `mtcars`, learn how to use the pipe (%>%) operator + the following `dplyr` verbs[^4] : `filter`, `select`, `arrange`, `count`, `rename`, `case_when`, `mutate`\n-  When searching for info on how to perform some actions using R, try adding the package name in the prompt, or use ?(package name) to see the functions available in a specific package\n-  [Basic tutorial](https://craig.rbind.io/post/2019-12-30-asgr-2-1-data-transformation-part-1/)\n-  [Data analysis intro vid](https://www.youtube.com/watch?v=yZ0bV2Afkjc)\n-  [Andrew Heiss website](https://evalsp23.classes.andrewheiss.com/resource/style.html)     \n-  [Peter D.R. Higgins e-book](https://bookdown.org/pdr_higgins/rmrwr/a-tasting-menu-of-r.html)\n-  `recode()` and `relevel` factor levels using the `forcats::fct_relevel()`\n\n[^4]: `dplyr` is a powerful R package for data manipulation. It provides a consistent set of verbs that help you tackle common data manipulation tasks. It is a `package` contained within `tidyverse`. You can get more details from [this link](https://dplyr.tidyverse.org/)\n\n\n## Step 6: Reading files\n-  If you plan to use Rstudio for data analysis and plan to import excel sheets, create a folder to store all the relevant files you’ll be using for analysis\n-  Read an external file: use `here()` package to manage file-path\n   \n\n### Step 6.1: Read excel files\n- `readxl` package is part of the tidyverse, with read_excel() as the main function that reads excel files (.xlsx) into R\n- This function can handle multiple sheets and retains data types and formatting from excel\n\n1. On `Rstudio`, create a new project (refer to step 3) and shift this file into the same file with the excel sheet\n2. In the R script, load necessary libraries\n3. List all files[^5] in the current project directory\n4. Filter the list to find the specific excel file\n\n[^5]:list.files() will only detect files that are located in the same folder as the project you are working on. Make sure to add everything you need (e.g. excel spreadsheets) in the same folder\n\nMore on readxl [here](https://readxl.tidyverse.org/)\n\n\n::: {.callout-tip}\n## Tip\nCreating a project is useful, as it allows you to access and manage your own files more conveniently using `list.files()` (more on this later)\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load necessary libraries\nlibrary(readxl)\nlibrary(stringr)\n\n# List all files in the current project directory\nfiles <- list.files()\n\n# Filter the list to find the specific Excel file\nfile_to_read <- str_subset(files, \"excel_file_1\")\n```\n:::\n\n\n\n### Step 6.2: Read csv files\n- `readr` package is also part of the tidyverse, with read_csv() as the main function that reads csv files (.csv) into R\n- This function is faster and more memory-efficient for large datasets compared excel files, and universally supports format for tabular data\n\n1. On `Rstudio`, create a new project and shift this file containing relevant csv files\n2. In the R script, load necessary libraries\n3. List the csv files\n4. Access your desired data\n\nMore on readr [here](https://readr.tidyverse.org/)\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load necessary libraries\nlibrary(readr)\n\n# List csv files\ncsv_files <- list.files(pattern = \"*.csv\")\n\n# Read all csv files into a list of data frames\ncsv_data <- lapply(csv_files, read_csv)\n\n# Access specific data frames (e.g., first and second files)\ncsv_data[[1]] #Accesses the first csv data frame\ncsv_data[[2]] #Accesses the second csv data frame\n```\n:::\n\n\n## Step 7: Data Cleaning\n\n-  Go through the [Janitor vignette](https://cran.r-project.org/web/packages/janitor/vignettes/janitor.html) \n-  Key functions like `clean_names(), remove_empty(c(\"rows\", \"cols\")), adorn_rounding()` tidy your data, while `tabyl()` can tabulate and summarise them \n\n## Step 8: Additional lessons and more verbs\n-  Learn more [variable selection operators](https://tidyselect.r-lib.org/reference/starts_with.html) : `starts_with(), ends_with(), contains(), matches()` \n-  Learn more `dplyr` verbs and base R functions, [this](https://dplyr.tidyverse.org/) contains a comprehensive cheat sheet  \n-  Go through lessons $9$ to $13$ of [fastR](https://github.com/matloff/fasteR)[^6]     \n\n[^6]: How does `tapply()` compare with `group_by` + `summarise` ?   \n\n## Step 9: Neaten your R script\n-  Ctrl + Shift + R to create sections between codes \n-  Use # to label your codes/ comment as R does not read it\n-  Alt + L to compress a highlighted chunk of code \n \n\n \n\n## Resources to learn R\n[Harrell's R workflow](https://hbiostat.org/rflow/)   \n\n[R Weekly newsletter](https://rweekly.org/): e-mail is sent every Monday and is full of helpful tutorials about how to do stuff with R.    \n\n[#rstats](https://twitter.com/search?q=%23rstats): For twitter users   \n\n[StackOverflow](https://stackoverflow.com/): Q&A site with answers to all sorts of programming questions    \n\n[RStudio Community](https://community.rstudio.com/) a forum for Rstudio users    \n\n[**R for Data Science**](https://r4ds.had.co.nz/): A free online book for learning the basics of R and the tidyverse.    \n\n[**R and RStudio cheat sheets**](https://www.rstudio.com/resources/cheatsheets/): A large collection of simple cheat sheets for RStudio, **ggplot2**, and other R-related things.     \n\n[**CSE 631: Principles & Practice of Data Visualization**](http://cslu.ohsu.edu/~bedricks/courses/cs631/):  \n\n[**Data Cleaning**](https://www.geeksforgeeks.org/data-cleaning-in-r/): A few simple examples that go through the basics of cleaning data\n\n[Code smart with ChatGPT](https://rstudiodatalab.medium.com/how-to-use-chatgpt-for-data-analysis-in-r-891372af842): How you can use ChatGPT to write codes and identify errors \n\n\n\n\n",
    "supporting": [
      "R_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}