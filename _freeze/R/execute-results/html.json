{
  "hash": "d3fede0623790dc50e1bdc6c0d62f645",
  "result": {
    "markdown": "---\ntitle: R\nformat:\n  html:\n    toc: true\n---\n\n\n\n\n\n## Learning R \n\n### Contributors  \n- Several colleagues/PhD students (2021-2023)  \n- Ler Vin See (Jan 2024)    \n\n\n\n \n## Steps to follow    \n\n## Step 1: Installing RStudio\n1.\tInstall `RStudio` and `R` (and know the difference between them)   \n-  You can install both using [this link](https://posit.co/download/rstudio-desktop/) \n- `R` is both a software and programming language   \n- `Rstudio` provides a (nice) environment to run `R`   \n- This website provides a nice [explanation of key concepts](https://okanbulut.github.io/edpy507/learning-r.html)      \n\n## Step 2: Installing R Packages\n2.\tIn `Rstudio`, perform these 2 basic chores: \n- Install `R` packages[^1]   \ni.\t`readxl`  \nii.\t`tidyverse`[^2]  \niii.\t`here`   \niv.\t`janitor`  \nv.\t`rms`  \n\n[^1]: Packages that are downloaded contain many functions that can be used to accomplishes some tasks. Each `R` function is a set of statements organized together to perform a specific task.  \n\n\n#### Package, Function, Code: An Analogy\n::: {.panel-tabset}\n\n## Package\nA `package` with its many `functions` can be seen as a book containing many pages. Just like how every page of a book tells a story, every R `function` in a `package` is based on accomplishing a task (e.g. tidying workspace or reading excel sheets)\n\n## Function\nA `function` can be seen as a page contained within a book (the `package`). This is the most important part of the 3 components mentioned here, as these `functions` are the ones you'll be using when coding in `RStudio`. `Functions` will perform tasks for you so you don't have to code something from scratch.\n\n\n::: {.callout-note}\nTo access the available functions, you first have to “activate” the `package` that the function is found in. You can do this by using the `library()` function (add the name of the package between the brackets). To learn about the functions available in a package, click on the “packages” button at the bottom right panel, and it will display a list of functions as well as what they will do\n:::\n\n## Codes\nCodes can be seen as the letters found on a page (`function`). Each page has a different number of letters, which is similar to how some `functions` are more complicated than others, and as such contain more lines of code. \n:::\n\n\n[^2]: `tidyverse` is different from the other packages, as it is a package that contains other packages. You can view the packages contained in `tidyverse` using [this link](https://www.tidyverse.org/). Note, however, that it is still crucial to learn base `R`!  \n\n\n\n::: {.callout-note}\nWhen you try downloading R packages, `RStudio` may prompt you to install `Rtools`\n. You can do so on this [website](https://cran.rstudio.com/bin/windows/Rtools/)\n:::\n\n::: {.callout-tip}\n## Tip \nTo learn about the functions available in a `package`, click on the “packages” button at the bottom right panel, and it will display a list of functions as well as what they will do\n\n:::\n\n\n\n### Step 2.1: How to use packages\n\n- Many functions that can aid in data analysis are found within packages that you have downloaded earlier. To access these functions, you first have to load or “activate” the package that the function is found in. You can do this by using `library(package you want to load/activate)`\n\n\n\n\n### Step 2.2: Moving Rstudio Panels\n- Move console pane to the [right](https://okanbulut.github.io/edpy507/learning-r.html)  \n- Do this by clicking on the icon that looks like for squares on the left of “Addins”, where you will select the option “Console on right”\n![](hpics/panel_screenshot.PNG)\n\n## Step 3: fastR lesson\n- Write and run some codes on the `source` panel[^3]   \n\n[^3]: Gotcha! User needs to understand that nothing gets saved after each session and all codes in R script need to be re-run during each session.    \n\n- Go through lessons $1$ to $8$ of [fastR](https://github.com/matloff/fasteR)  \n\n## Step 4: Learning important verbs\n-  Try searching up verbs in the `tidyverse` package \n-  based on the built-in `mtcars`, learn how to use the pipe (%>%) operator + the following `dplyr`[^4] verbs: `filter`, `select`, `arrange`, `count`, `rename`, `case_when`, `mutate`\n-  When searching for info on how to perform some actions using R, try adding the package name in the prompt, or use ?(package name) to see the functions available in a specific package\n-  [nice tutorial](https://craig.rbind.io/post/2019-12-30-asgr-2-1-data-transformation-part-1/)\n-  [Andrew Heiss website](https://evalsp23.classes.andrewheiss.com/resource/style.html)     \n-  `recode()` and `relevel` factor levels using the `forcats::fct_relevel()`   \n\n\n## Step 5: Read excel files\n-  Read an external file: use `here()` package to manage file-path\n-  Create a `Rstudio` project. You may follow this [tutorial](https://www.youtube.com/watch?v=WyrJmJWgPiU). \n-  Read a file using `readxl` + `here()`    \n\n### Step 5.1: Alternative method to read excel files\nIf you plan to use R studios for data analysis and plan to import a data table, create a folder where you can store all the files you’ll be using to analyze the files\n\n- Add the excel file you want to analyze in this folder\n-  On `Rstudio`, create a new project (refer to step 5) and shift this file into the same file with the excel sheet\n-  After this, using the `list.files()`[^6] function should bring up the other files in the same folder of this project, including the excel sheet\n-  You can isolate the file you want to open by using `list.files()[Assigned number of target file]`\n\n[^4]: `dplyr` is a powerful R package for data manipulation. It provides a consistent set of verbs that help you tackle common data manipulation tasks. It is a `package` contained within `tidyverse`. You can get more details from [this link](https://dplyr.tidyverse.org/)\n\n\n\n::: {.callout-tip}\n## Tip\nCreating a project is useful, as it allows you to access and manage your own files more conveniently using `list.files()` (more on this later)\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# list.files() in action!\nlist.files()\n\n[1] \"panel_screenshot.png\" \"R.html\"               \"R.qmd\"               \n[4] \"R.rmarkdown\"          \"R_files\"  \n```\n:::\n\n\n\n\n\n\n\n## Step 6: Data Cleaning\n\n-   Go through the [Janitor vignette](https://cran.r-project.org/web/packages/janitor/vignettes/janitor.html) \n\n## Step 7: Additional lessons and more verbs\n-  Learn more `dplyr` verbs and base R functions   \n-\t`joining` (left_join), `group_by`, `summarise`    \n-  Go through lessons $9$ to $13$ of [fastR](https://github.com/matloff/fasteR)[^7]     \n\n[^7]: How does `tapply()` compare with `group_by` + `summarise` ?   \n\n\n\n \n\n\n## Resources to learn R\n[Harrell's R workflow](https://hbiostat.org/rflow/)   \n\n[R Weekly newsletter](https://rweekly.org/): e-mail is sent every Monday and is full of helpful tutorials about how to do stuff with R.    \n\n[#rstats](https://twitter.com/search?q=%23rstats): For twitter users   \n\n[StackOverflow](https://stackoverflow.com/): Q&A site with answers to all sorts of programming questions    \n\n[RStudio Community](https://community.rstudio.com/) a forum for Rstudio users    \n\n[**R for Data Science**](https://r4ds.had.co.nz/): A free online book for learning the basics of R and the tidyverse.    \n\n[**R and RStudio cheat sheets**](https://www.rstudio.com/resources/cheatsheets/): A large collection of simple cheat sheets for RStudio, **ggplot2**, and other R-related things.     \n\n[**CSE 631: Principles & Practice of Data Visualization**](http://cslu.ohsu.edu/~bedricks/courses/cs631/):  \n\n[**Data Cleaning**](https://www.geeksforgeeks.org/data-cleaning-in-r/): A few simple examples that go through the basics of cleaning data\n\n\n\n[^6]: `list.files()` will only detect files that are located in the same folder as the project you are working on. Make sure to add everything you need(e.g. excel spreadsheets) in the same folder\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}